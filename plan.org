breaking changes

* no clash
#+begin_src clojure
  (defn jetty
    {::di/kind :component}
    []
    ...)

  ;; it's a component now
  ;; it should be a service
  (defn service []
    ...)
#+end_src

* unreachable arity

#+begin_src clojure
  (defn jetty
    {::di/kind :component}
    ([] throw)
    ([deps] ...))

  (defn service
    ([] throw)
    ([deps] ...))
#+end_src

will throw "Unreacheble arity 0"

#+begin_src clojure
  (defn jetty
    {::di/kind :component}
    ([deps] ...)
    ([deps arg] throw))
#+end_src

will throw "Unexpected arity 2 for component"
it's ok for services

* update-key & instrument

#+begin_src clojure
  (di/update-key `foo assoc :bar (di/ref `bar))
  (di/update-key `foo (di/ref `f) :bar (di/ref `bar))
#+end_src

Or we could generate a virtual key for such arguments like
~di/add-side-dependency~ do. In this case every arg is a factory
with virtual generated key.

* env-parsing

probably it could be applied not only to envs

so I could change the name
